/*  ===========================================================================
*
*   This file is part of HISE.
*   Copyright 2016 Christoph Hart
*
*   HISE is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.
*
*   HISE is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with HISE.  If not, see <http://www.gnu.org/licenses/>.
*
*   Commercial licenses for using HISE in an closed source project are
*   available on request. Please visit the project's website to get more
*   information about commercial licensing:
*
*   http://www.hise.audio/
*
*   HISE is based on the JUCE library,
*   which must be separately licensed for closed source applications:
*
*   http://www.juce.com
*
*   ===========================================================================
*/

namespace hise { using namespace juce;

SampleMapEditorToolbarFactory::SampleMapEditorToolbarFactory(SampleMapEditor *editor_):
		editor(editor_),
		sampler(editor_->sampler)
	{};

ToolbarItemComponent * SampleMapEditorToolbarFactory::createItem(int itemId)
{
	ApplicationCommandManager *a = editor->getCommandManager();

	ToolbarButton *tb = new ToolbarButton(itemId, "", std::unique_ptr<Drawable>(ToolbarPaths::createPath(itemId, false)),
													  std::unique_ptr<Drawable>(ToolbarPaths::createPath(itemId, true)));
	
	tb->setCommandToTrigger(a, itemId, true);
	return tb;
}

void SampleMapEditorToolbarFactory::getAllToolbarItemIds(Array<int> &ids)
{
	ids.clear();
	
	ids.add(SampleMapEditor::ZoomIn);
	ids.add(SampleMapEditor::ZoomOut);
	ids.add(SampleMapEditor::ToggleVerticalSize);
	ids.add(SampleMapEditor::PopOutMap);

	ids.add(spacerId);

	ids.add(SampleMapEditor::NewSampleMap);
	ids.add(SampleMapEditor::LoadSampleMap);
	ids.add(SampleMapEditor::SaveSampleMap);
	ids.add(SampleMapEditor::SaveSampleMapAsMonolith);
	ids.add(SampleMapEditor::ImportSfz);
	
	ids.add(spacerId);

	
	// Sample Editing
		
	ids.add(SampleMapEditor::CutSamples);
	ids.add(SampleMapEditor::CopySamples);
	ids.add(SampleMapEditor::PasteSamples);

	ids.add(spacerId);

	ids.add(SampleMapEditor::DuplicateSamples);
	ids.add(SampleMapEditor::DeleteSamples);

	ids.add(spacerId);

	ids.add(SampleMapEditor::FillNoteGaps);
	ids.add(SampleMapEditor::FillVelocityGaps);
	ids.add(SampleMapEditor::AutomapVelocity);
	ids.add(SampleMapEditor::RefreshVelocityXFade);

};


std::unique_ptr<Drawable> SampleMapEditorToolbarFactory::ToolbarPaths::createPath(int id, bool /*isOn*/)
{
	Path path;

	switch(id)
	{
	default:
	case SampleMapEditor::CutSamples:
		{
		
		path.loadPathFromData (SampleMapIcons::cutSamples, sizeof (SampleMapIcons::cutSamples));

		break;
		}
	case SampleMapEditor::CopySamples:
		{
			path.loadPathFromData (SampleMapIcons::copySamples, sizeof (SampleMapIcons::copySamples));
			break;
		}
	case SampleMapEditor::PasteSamples:
		{
			path.loadPathFromData (SampleMapIcons::pasteSamples, sizeof (SampleMapIcons::pasteSamples));
			break;
		}
	case SampleMapEditor::DeleteSamples:
		{
			path.loadPathFromData (SampleMapIcons::deleteSamples, sizeof (SampleMapIcons::deleteSamples));
			break;

		}
	case SampleMapEditor::DuplicateSamples:
		{
			path.loadPathFromData (SampleMapIcons::duplicateSamples, sizeof (SampleMapIcons::duplicateSamples));
			break;
		}
	case SampleMapEditor::FillNoteGaps:
		{
			static const unsigned char pathData[] = { 110,109,0,0,0,0,39,49,12,65,108,221,36,12,65,26,47,140,65,108,196,32,12,65,200,118,70,65,108,133,235,169,65,249,126,70,65,108,133,235,169,65,26,47,140,65,108,0,0,240,65,39,49,12,65,108,133,235,169,65,0,0,0,0,108,133,235,169,65,217,206,163,64,108,196,
			32,12,65,217,206,163,64,108,221,36,12,65,0,0,0,0,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));

			break;
		}
	case SampleMapEditor::FillVelocityGaps:
		{
			static const unsigned char pathData[] = { 110,109,244,253,111,65,203,161,199,192,108,204,161,199,64,222,79,33,64,108,82,184,53,65,124,63,33,64,108,33,176,53,65,37,6,112,65,108,203,161,199,64,37,6,112,65,108,244,253,111,65,142,23,190,65,108,142,23,190,65,38,6,112,65,108,216,35,149,65,38,6,112,
			65,108,216,35,149,65,128,63,33,64,108,142,23,190,65,226,79,33,64,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));
			break;


		}

	case SampleMapEditor::NewSampleMap:
		{
			
			path.loadPathFromData (SampleMapIcons::newSampleMap, sizeof (SampleMapIcons::newSampleMap));
			break;
		}
	case SampleMapEditor::LoadSampleMap:
		{
			
			path.loadPathFromData (SampleMapIcons::loadSampleMap, sizeof (SampleMapIcons::loadSampleMap));
			break;
		}
	case SampleMapEditor::SaveSampleMap:
		{
			

			path.loadPathFromData (SampleMapIcons::saveSampleMap, sizeof (SampleMapIcons::saveSampleMap));
			break;
		}
	case SampleMapEditor::ImportSfz:
		{
			static const unsigned char pathData[] = { 110,109,0,192,152,67,0,120,186,67,98,79,191,150,67,0,120,186,67,0,8,149,67,24,22,188,67,0,8,149,67,0,28,190,67,108,0,8,149,67,0,212,215,67,98,0,8,149,67,232,217,217,67,79,191,150,67,0,120,219,67,0,192,152,67,0,120,219,67,108,0,164,180,67,0,120,219,67,
			98,177,164,182,67,0,120,219,67,0,92,184,67,232,217,217,67,0,92,184,67,0,212,215,67,108,0,92,184,67,0,28,190,67,98,0,92,184,67,24,22,188,67,177,164,182,67,0,120,186,67,0,164,180,67,0,120,186,67,108,0,192,152,67,0,120,186,67,99,109,0,192,152,67,0,160,189,
			67,108,0,164,180,67,0,160,189,67,98,145,3,181,67,0,160,189,67,0,52,181,67,164,216,189,67,0,52,181,67,0,28,190,67,108,0,52,181,67,0,212,215,67,98,0,52,181,67,92,23,216,67,145,3,181,67,0,80,216,67,0,164,180,67,0,80,216,67,108,0,192,152,67,0,80,216,67,98,
			111,96,152,67,0,80,216,67,0,48,152,67,92,23,216,67,0,48,152,67,0,212,215,67,108,0,48,152,67,0,28,190,67,98,0,48,152,67,164,216,189,67,111,96,152,67,0,160,189,67,0,192,152,67,0,160,189,67,99,109,99,184,179,67,236,106,199,67,98,98,184,179,67,61,117,199,
			67,69,150,179,67,208,154,199,67,11,82,179,67,168,219,199,67,98,208,13,179,67,129,28,200,67,236,181,178,67,110,110,200,67,95,74,178,67,112,209,200,67,98,209,222,177,67,115,52,201,67,166,101,177,67,214,160,201,67,219,222,176,67,152,22,202,67,98,16,88,176,
			67,91,140,202,67,27,210,175,67,66,1,203,67,251,76,175,67,76,117,203,67,98,219,199,174,67,87,233,203,67,178,72,174,67,215,84,204,67,127,207,173,67,204,183,204,67,98,76,86,173,67,194,26,205,67,110,242,172,67,63,105,205,67,227,163,172,67,68,163,205,67,108,
			131,184,172,67,149,173,205,67,98,120,27,173,67,144,115,205,67,251,163,173,67,141,86,205,67,11,82,174,67,141,86,205,67,98,229,105,174,67,141,86,205,67,72,144,174,67,59,94,205,67,51,197,174,67,153,109,205,67,98,29,250,174,67,246,124,205,67,149,49,175,67,
			41,141,205,67,155,107,175,67,49,158,205,67,98,160,165,175,67,57,175,205,67,60,220,175,67,108,191,205,67,111,15,176,67,201,206,205,67,98,162,66,176,67,38,222,205,67,126,102,176,67,213,229,205,67,3,123,176,67,213,229,205,67,98,189,153,176,67,213,229,205,
			67,77,185,176,67,48,216,205,67,179,217,176,67,229,188,205,67,98,24,250,176,67,155,161,205,67,74,10,177,67,152,132,205,67,75,10,177,67,221,101,205,67,98,75,10,177,67,200,84,205,67,11,6,177,67,82,58,205,67,143,253,176,67,125,22,205,67,98,18,245,176,67,
			168,242,204,67,211,240,176,67,50,216,204,67,211,240,176,67,29,199,204,67,98,211,240,176,67,152,103,204,67,10,24,177,67,213,55,204,67,123,102,177,67,213,55,204,67,98,154,235,177,67,213,55,204,67,42,46,178,67,101,122,204,67,43,46,178,67,133,255,204,67,
			98,42,46,178,67,122,98,205,67,178,25,178,67,85,192,205,67,195,240,177,67,21,25,206,67,98,210,199,177,67,213,113,206,67,55,145,177,67,125,191,206,67,239,76,177,67,13,2,207,67,98,167,8,177,67,157,68,207,67,71,185,176,67,93,122,207,67,207,94,176,67,77,163,
			207,67,98,87,4,176,67,61,204,207,67,88,167,175,67,181,224,207,67,211,71,175,67,181,224,207,67,98,93,10,175,67,181,224,207,67,55,203,174,67,199,212,207,67,95,138,174,67,237,188,207,67,98,135,73,174,67,18,165,207,67,247,6,174,67,164,138,207,67,175,194,
			173,67,161,109,207,67,98,103,126,173,67,158,80,207,67,74,57,173,67,41,54,207,67,87,243,172,67,65,30,207,67,98,100,173,172,67,89,6,207,67,136,102,172,67,101,250,206,67,195,30,172,67,101,250,206,67,98,67,249,171,67,101,250,206,67,119,207,171,67,232,2,207,
			67,95,161,171,67,241,19,207,67,98,71,115,171,67,249,36,207,67,195,71,171,67,228,54,207,67,211,30,171,67,177,73,207,67,98,227,245,170,67,127,92,207,67,14,210,170,67,112,110,207,67,83,179,170,67,133,127,207,67,98,152,148,170,67,154,144,207,67,203,129,170,
			67,37,153,207,67,235,122,170,67,37,153,207,67,98,151,119,170,67,37,153,207,67,175,107,170,67,110,151,207,67,55,87,170,67,252,147,207,67,98,191,66,170,67,139,144,207,67,107,45,170,67,71,140,207,67,59,23,170,67,44,135,207,67,98,11,1,170,67,17,130,207,67,
			140,236,169,67,239,124,207,67,191,217,169,67,200,119,207,67,98,242,198,169,67,159,114,207,67,139,189,169,67,99,110,207,67,139,189,169,67,12,107,207,67,98,139,189,169,67,151,45,207,67,27,221,169,67,115,232,206,67,59,28,170,67,160,155,206,67,98,91,91,170,
			67,205,78,206,67,42,197,170,67,25,234,205,67,167,89,171,67,132,109,205,67,98,36,238,171,67,239,240,204,67,222,175,172,67,54,82,204,67,211,158,173,67,88,145,203,67,98,200,141,174,67,123,208,202,67,195,182,175,67,156,219,201,67,195,25,177,67,188,178,200,
			67,98,120,254,176,67,243,188,200,67,211,170,176,67,12,194,200,67,211,30,176,67,12,194,200,67,98,136,3,176,67,12,194,200,67,37,221,175,67,128,191,200,67,171,171,175,67,100,186,200,67,98,48,122,175,67,73,181,200,67,253,70,175,67,82,175,200,67,19,18,175,
			67,128,168,200,67,98,40,221,174,67,173,161,200,67,246,169,174,67,176,155,200,67,123,120,174,67,136,150,200,67,98,0,71,174,67,95,145,200,67,144,32,174,67,205,142,200,67,43,5,174,67,205,142,200,67,98,203,216,173,67,205,142,200,67,71,173,173,67,43,158,200,
			67,159,130,173,67,229,188,200,67,98,247,87,173,67,160,219,200,67,7,47,173,67,160,254,200,67,207,7,173,67,229,37,201,67,98,151,224,172,67,43,77,201,67,194,188,172,67,43,112,201,67,79,156,172,67,229,142,201,67,98,220,123,172,67,160,173,201,67,182,95,172,
			67,253,188,201,67,219,71,172,67,253,188,201,67,98,102,10,172,67,253,188,201,67,171,235,171,67,232,171,201,67,171,235,171,67,189,137,201,67,98,171,235,171,67,35,100,201,67,113,254,171,67,101,40,201,67,255,35,172,67,133,214,200,67,98,140,73,172,67,166,
			132,200,67,193,118,172,67,227,49,200,67,159,171,172,67,61,222,199,67,98,124,224,172,67,152,138,199,67,202,24,173,67,54,65,199,67,135,84,173,67,21,2,199,67,98,68,144,173,67,245,194,198,67,83,196,173,67,102,163,198,67,179,240,173,67,101,163,198,67,98,248,
			93,174,67,102,163,198,67,43,180,174,67,13,171,198,67,75,243,174,67,93,186,198,67,98,107,50,175,67,174,201,198,67,40,110,175,67,224,217,198,67,131,166,175,67,245,234,198,67,98,221,222,175,67,11,252,198,67,40,29,176,67,68,12,199,67,99,97,176,67,161,27,
			199,67,98,157,165,176,67,255,42,199,67,205,1,177,67,174,50,199,67,243,117,177,67,173,50,199,67,98,146,148,177,67,174,50,199,67,203,187,177,67,255,42,199,67,155,235,177,67,161,27,199,67,98,107,27,178,67,68,12,199,67,236,76,178,67,11,252,198,67,31,128,
			178,67,245,234,198,67,98,81,179,178,67,224,217,198,67,246,227,178,67,174,201,198,67,15,18,179,67,93,186,198,67,98,38,64,179,67,14,171,198,67,216,100,179,67,102,163,198,67,35,128,179,67,101,163,198,67,98,141,148,179,67,102,163,198,67,8,163,179,67,150,
			185,198,67,147,171,179,67,245,229,198,67,98,29,180,179,67,86,18,199,67,98,184,179,67,213,55,199,67,99,184,179,67,117,86,199,67,108,99,184,179,67,237,106,199,67,99,109,187,197,173,67,100,35,196,67,98,117,88,173,67,101,35,196,67,220,248,172,67,91,6,196,
			67,239,166,172,67,72,204,195,67,98,1,85,172,67,54,146,195,67,10,44,172,67,205,72,195,67,11,44,172,67,12,240,194,67,98,10,44,172,67,226,130,194,67,74,95,172,67,26,25,194,67,203,197,172,67,180,178,193,67,108,99,100,173,67,244,19,193,67,98,98,100,173,67,
			192,9,193,67,181,92,173,67,96,0,193,67,87,77,173,67,212,247,192,67,98,249,61,173,67,74,239,192,67,14,44,173,67,156,231,192,67,151,23,173,67,200,224,192,67,98,30,3,173,67,245,217,192,67,202,237,172,67,215,212,192,67,155,215,172,67,100,209,192,67,98,106,
			193,172,67,246,205,192,67,127,175,172,67,63,204,192,67,219,161,172,67,59,204,192,67,98,85,66,172,67,172,207,192,67,146,239,171,67,91,250,192,67,147,169,171,67,71,76,193,67,98,147,99,171,67,53,158,193,67,144,35,171,67,109,11,194,67,139,233,170,67,239,
			147,194,67,98,133,175,170,67,114,28,195,67,92,118,170,67,44,187,195,67,15,62,170,67,27,112,196,67,98,193,5,170,67,12,37,197,67,40,201,169,67,49,228,197,67,67,136,169,67,139,173,198,67,108,243,79,170,67,139,173,198,67,98,200,185,170,67,140,173,198,67,
			66,14,171,67,112,174,198,67,99,77,171,67,33,176,198,67,98,131,140,171,67,216,177,198,67,40,189,171,67,103,180,198,67,83,223,171,67,201,183,198,67,98,125,1,172,67,45,187,198,67,137,24,172,67,70,192,198,67,119,36,172,67,25,199,198,67,98,101,48,172,67,236,
			205,198,67,90,54,172,67,126,214,198,67,91,54,172,67,205,224,198,67,98,90,54,172,67,62,228,198,67,164,52,172,67,191,242,198,67,50,49,172,67,81,12,199,67,98,193,45,172,67,228,37,199,67,238,38,172,67,47,65,199,67,186,28,172,67,49,94,199,67,98,131,18,172,
			67,52,123,199,67,187,5,172,67,170,149,199,67,94,246,171,67,145,173,199,67,98,0,231,171,67,121,197,199,67,100,211,171,67,109,209,199,67,138,187,171,67,109,209,199,67,108,138,59,169,67,109,209,199,67,98,57,90,168,67,104,93,202,67,221,132,167,67,165,138,
			204,67,118,187,166,67,37,89,206,67,98,14,242,165,67,165,39,208,67,139,35,165,67,134,162,209,67,238,79,164,67,201,201,210,67,98,81,124,163,67,11,241,211,67,227,155,162,67,202,201,212,67,166,174,161,67,5,84,213,67,98,105,193,160,67,63,222,213,67,77,182,
			159,67,93,35,214,67,82,141,158,67,93,35,214,67,98,168,69,158,67,92,35,214,67,102,1,158,67,219,20,214,67,142,192,157,67,217,247,213,67,98,182,127,157,67,214,218,213,67,105,71,157,67,145,179,213,67,166,23,157,67,9,130,213,67,98,228,231,156,67,128,80,213,
			67,129,193,156,67,81,23,213,67,126,164,156,67,121,214,212,67,98,123,135,156,67,161,149,212,67,250,120,156,67,95,81,212,67,250,120,156,67,181,9,212,67,98,250,120,156,67,117,139,211,67,129,158,156,67,15,37,211,67,142,233,156,67,133,214,210,67,98,156,52,
			157,67,250,135,210,67,152,151,157,67,181,96,210,67,130,18,158,67,181,96,210,67,98,120,117,158,67,181,96,210,67,94,199,158,67,75,128,210,67,54,8,159,67,121,191,210,67,98,14,73,159,67,166,254,210,67,122,105,159,67,183,79,211,67,122,105,159,67,173,178,211,
			67,98,122,105,159,67,215,212,211,67,64,95,159,67,242,252,211,67,198,74,159,67,253,42,212,67,98,78,54,159,67,7,89,212,67,73,31,159,67,175,131,212,67,182,5,159,67,245,170,212,67,98,36,236,158,67,58,210,212,67,30,213,158,67,173,242,212,67,166,192,158,67,
			77,12,213,67,98,46,172,158,67,236,37,213,67,242,161,158,67,5,49,213,67,242,161,158,67,149,45,213,67,98,242,161,158,67,201,55,213,67,41,172,158,67,229,60,213,67,146,192,158,67,229,60,213,67,98,29,15,159,67,229,60,213,67,151,134,159,67,133,16,213,67,2,
			39,160,67,197,183,212,67,98,125,158,160,67,138,115,212,67,111,7,161,67,151,10,212,67,218,97,161,67,237,124,211,67,98,69,188,161,67,66,239,210,67,110,24,162,67,110,40,210,67,86,118,162,67,113,40,209,67,98,62,212,162,67,116,40,208,67,55,61,163,67,194,230,
			206,67,66,177,163,67,93,99,205,67,98,76,37,164,67,248,223,203,67,90,182,164,67,168,4,202,67,106,100,165,67,109,209,199,67,108,74,54,163,67,109,209,199,67,98,69,252,162,67,109,209,199,67,66,223,162,67,197,166,199,67,66,223,162,67,117,81,199,67,98,66,223,
			162,67,48,228,198,67,23,3,163,67,142,173,198,67,194,74,163,67,141,173,198,67,108,18,213,165,67,141,173,198,67,98,242,38,166,67,99,180,197,67,123,140,166,67,140,208,196,67,174,5,167,67,9,2,196,67,98,224,126,167,67,135,51,195,67,148,6,168,67,227,130,194,
			67,202,156,168,67,29,240,193,67,98,255,50,169,67,89,93,193,67,33,213,169,67,219,235,192,67,50,131,170,67,165,155,192,67,98,66,49,171,67,113,75,192,67,36,230,171,67,86,35,192,67,218,161,172,67,85,35,192,67,98,121,1,173,67,86,35,192,67,241,91,173,67,31,
			48,192,67,66,177,173,67,177,73,192,67,98,145,6,174,67,69,99,192,67,129,82,174,67,26,135,192,67,18,149,174,67,49,181,192,67,98,161,215,174,67,74,227,192,67,140,12,175,67,194,26,193,67,210,51,175,67,153,91,193,67,98,22,91,175,67,114,156,193,67,185,110,
			175,67,219,229,193,67,186,110,175,67,213,55,194,67,98,185,110,175,67,43,199,194,67,158,70,175,67,238,60,195,67,106,246,174,67,29,153,195,67,98,52,166,174,67,77,245,195,67,164,64,174,67,102,35,196,67,186,197,173,67,101,35,196,67,99,109,139,191,162,67,
			180,96,200,67,98,138,191,162,67,63,175,200,67,208,160,162,67,66,239,200,67,91,99,162,67,188,32,201,67,98,229,37,162,67,55,82,201,67,59,222,161,67,244,106,201,67,91,140,161,67,244,106,201,67,98,117,75,161,67,244,106,201,67,208,26,161,67,151,91,201,67,
			107,250,160,67,220,60,201,67,98,5,218,160,67,34,30,201,67,72,193,160,67,227,246,200,67,51,176,160,67,32,199,200,67,98,29,159,160,67,94,151,200,67,120,145,160,67,7,101,200,67,67,135,160,67,28,48,200,67,98,12,125,160,67,50,251,199,67,104,111,160,67,219,
			200,199,67,83,94,160,67,24,153,199,67,98,61,77,160,67,86,105,199,67,157,51,160,67,23,66,199,67,115,17,160,67,92,35,199,67,98,72,239,159,67,162,4,199,67,21,188,159,67,68,245,198,67,219,119,159,67,68,245,198,67,98,86,140,158,67,68,245,198,67,147,22,158,
			67,245,118,199,67,147,22,158,67,84,122,200,67,98,147,22,158,67,244,217,200,67,16,101,158,67,44,71,201,67,11,2,159,67,252,193,201,67,98,144,162,159,67,87,64,202,67,8,32,160,67,18,165,202,67,115,122,160,67,44,240,202,67,98,221,212,160,67,71,59,203,67,67,
			24,161,67,251,124,203,67,163,68,161,67,72,181,203,67,98,3,113,161,67,150,237,203,67,84,140,161,67,86,35,204,67,151,150,161,67,136,86,204,67,98,216,160,161,67,187,137,204,67,251,165,161,67,68,204,204,67,251,165,161,67,36,30,205,67,98,251,165,161,67,218,
			142,205,67,97,140,161,67,184,242,205,67,47,89,161,67,192,73,206,67,98,252,37,161,67,200,160,206,67,74,222,160,67,7,235,206,67,27,130,160,67,124,40,207,67,98,235,37,160,67,242,101,207,67,136,185,159,67,3,148,207,67,243,60,159,67,176,178,207,67,98,93,192,
			158,67,93,209,207,67,176,56,158,67,180,224,207,67,235,165,157,67,180,224,207,67,98,112,46,157,67,180,224,207,67,23,188,156,67,15,211,207,67,223,78,156,67,196,183,207,67,98,167,225,155,67,121,156,207,67,20,130,155,67,59,117,207,67,39,48,155,67,8,66,207,
			67,98,58,222,154,67,213,14,207,67,134,156,154,67,103,209,206,67,11,107,154,67,188,137,206,67,98,145,57,154,67,18,66,206,67,211,32,154,67,220,241,205,67,211,32,154,67,28,153,205,67,98,211,32,154,67,204,183,204,67,214,131,154,67,36,71,204,67,219,73,155,
			67,36,71,204,67,98,155,162,155,67,36,71,204,67,105,233,155,67,75,99,204,67,71,30,156,67,152,155,204,67,98,36,83,156,67,229,211,204,67,147,109,156,67,108,28,205,67,147,109,156,67,44,117,205,67,98,147,109,156,67,33,141,205,67,120,104,156,67,76,175,205,
			67,67,94,156,67,172,219,205,67,98,12,84,156,67,12,8,206,67,243,78,156,67,113,40,206,67,243,78,156,67,220,60,206,67,98,243,78,156,67,50,129,206,67,128,116,156,67,140,185,206,67,155,191,156,67,236,229,206,67,98,181,10,157,67,76,18,207,67,51,89,157,67,124,
			40,207,67,19,171,157,67,124,40,207,67,98,104,198,158,67,124,40,207,67,19,84,159,67,119,168,206,67,19,84,159,67,108,168,205,67,98,19,84,159,67,215,113,205,67,227,61,159,67,95,58,205,67,131,17,159,67,4,2,205,67,98,35,229,158,67,170,201,204,67,207,172,158,
			67,164,143,204,67,135,104,158,67,244,83,204,67,98,63,36,158,67,68,24,204,67,220,218,157,67,178,219,203,67,95,140,157,67,60,158,203,67,98,225,61,157,67,199,96,203,67,127,244,156,67,232,31,203,67,55,176,156,67,160,219,202,67,98,239,107,156,67,88,151,202,
			67,155,51,156,67,95,81,202,67,59,7,156,67,180,9,202,67,98,219,218,155,67,10,194,201,67,171,196,155,67,239,118,201,67,171,196,155,67,100,40,201,67,98,171,196,155,67,58,187,200,67,104,221,155,67,69,88,200,67,227,14,156,67,132,255,199,67,98,93,64,156,67,
			196,166,199,67,202,131,156,67,170,91,199,67,39,217,156,67,52,30,199,67,98,132,46,157,67,191,224,198,67,128,145,157,67,246,176,198,67,27,2,158,67,216,142,198,67,98,181,114,158,67,187,108,198,67,232,235,158,67,172,91,198,67,179,109,159,67,172,91,198,67,
			98,216,119,160,67,172,91,198,67,5,72,161,67,226,136,198,67,59,222,161,67,76,227,198,67,98,112,116,162,67,183,61,199,67,138,191,162,67,218,188,199,67,139,191,162,67,180,96,200,67,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));
			break;
		}
	case SampleMapEditor::SaveSampleMapAsMonolith:
		{
			static const unsigned char pathData[] = { 110,109,166,92,181,67,88,209,231,193,98,31,230,165,67,88,209,231,193,166,92,153,67,88,206,121,192,166,92,153,67,168,46,216,65,98,166,92,153,67,142,203,103,66,31,230,165,67,170,11,166,66,166,92,181,67,170,11,166,66,98,45,211,196,67,170,11,166,66,166,92,
			209,67,142,203,103,66,166,92,209,67,168,46,216,65,98,166,92,209,67,88,206,121,192,45,211,196,67,88,209,231,193,166,92,181,67,88,209,231,193,99,109,166,92,181,67,88,109,101,66,108,70,135,168,67,168,46,216,65,108,230,177,176,67,168,46,216,65,108,230,177,
			176,67,242,42,122,191,108,70,7,186,67,242,42,122,191,108,70,7,186,67,168,46,216,65,108,197,49,194,67,168,46,216,65,108,166,92,181,67,88,109,101,66,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));
			break;

		}
	case SampleMapEditor::ZoomIn:
		{
			
			path.loadPathFromData (SampleMapIcons::zoomIn, sizeof (SampleMapIcons::zoomIn));
			break;

		}
	case SampleMapEditor::ZoomOut:
		{
			

			path.loadPathFromData (SampleMapIcons::zoomOut, sizeof (SampleMapIcons::zoomOut));
			break;

		}
	case SampleMapEditor::ToggleVerticalSize:
	{
		static const unsigned char pathData[] = { 110, 109, 128, 109, 151, 67, 0, 185, 239, 66, 98, 102, 225, 114, 67, 0, 185, 239, 66, 225, 122, 59, 67, 13, 29, 13, 67, 0, 32, 18, 67, 128, 197, 50, 67, 98, 130, 21, 197, 66, 251, 25, 94, 67, 0, 164, 138, 66, 174, 38, 140, 67, 0, 164, 138, 66, 0, 31, 175, 67, 98, 0, 164, 138, 66, 154, 216, 197, 67, 86, 242, 152, 66, 79, 0,
			216, 67, 0, 196, 196, 66, 192, 29, 229, 67, 108, 0, 194, 196, 66, 64, 30, 229, 67, 98, 255, 65, 228, 66, 177, 139, 238, 67, 77, 121, 7, 67, 33, 160, 245, 67, 128, 140, 32, 67, 64, 197, 250, 67, 98, 149, 250, 33, 67, 6, 129, 2, 68, 240, 210, 40, 67, 56, 149, 9, 68, 128, 53, 57, 67, 128, 6, 13, 68, 98, 199, 182, 82, 67, 29, 99,
			18, 68, 146, 30, 127, 67, 0, 55, 18, 68, 192, 197, 149, 67, 0, 55, 18, 68, 98, 59, 218, 166, 67, 0, 55, 18, 68, 191, 200, 193, 67, 40, 124, 17, 68, 64, 230, 205, 67, 32, 16, 14, 68, 98, 205, 190, 219, 67, 216, 38, 10, 68, 31, 78, 221, 67, 218, 98, 3, 68, 192, 120, 221, 67, 128, 74, 250, 67, 98, 6, 15, 235, 67, 58, 140, 244,
			67, 170, 128, 246, 67, 0, 147, 236, 67, 64, 180, 254, 67, 64, 0, 226, 67, 98, 59, 89, 4, 68, 84, 30, 213, 67, 64, 25, 6, 68, 158, 190, 196, 67, 64, 25, 6, 68, 0, 31, 175, 67, 98, 64, 25, 6, 68, 133, 106, 145, 67, 116, 209, 252, 67, 62, 245, 104, 67, 128, 251, 234, 67, 128, 101, 63, 67, 98, 46, 147, 213, 67, 109, 130, 13, 67,
			149, 155, 186, 67, 0, 185, 239, 66, 128, 109, 151, 67, 0, 185, 239, 66, 99, 109, 128, 232, 150, 67, 128, 18, 25, 67, 98, 251, 220, 181, 67, 128, 18, 25, 67, 128, 245, 206, 67, 11, 67, 75, 67, 128, 245, 206, 67, 0, 150, 132, 67, 98, 128, 245, 206, 67, 123, 138, 163, 67, 251, 220, 181, 67, 192, 162, 188, 67, 128, 232, 150,
			67, 192, 162, 188, 67, 98, 10, 232, 111, 67, 192, 162, 188, 67, 128, 183, 61, 67, 123, 138, 163, 67, 128, 183, 61, 67, 0, 150, 132, 67, 98, 128, 183, 61, 67, 11, 67, 75, 67, 10, 232, 111, 67, 128, 18, 25, 67, 128, 232, 150, 67, 128, 18, 25, 67, 99, 109, 0, 117, 8, 67, 0, 239, 97, 67, 98, 187, 75, 9, 67, 187, 232, 97, 67, 31,
			25, 10, 67, 174, 255, 97, 67, 0, 220, 10, 67, 0, 52, 98, 67, 98, 109, 10, 23, 67, 215, 119, 101, 67, 255, 101, 22, 67, 10, 95, 134, 67, 128, 59, 10, 67, 192, 18, 157, 67, 98, 83, 34, 252, 66, 250, 197, 179, 67, 248, 248, 213, 66, 10, 241, 196, 67, 0, 156, 189, 66, 192, 79, 195, 67, 108, 0, 155, 189, 66, 192, 79, 195, 67, 98,
			213, 62, 165, 66, 77, 173, 193, 67, 79, 41, 159, 66, 14, 12, 170, 67, 0, 126, 183, 66, 128, 88, 147, 67, 98, 174, 77, 206, 66, 205, 31, 124, 67, 21, 192, 247, 66, 9, 77, 98, 67, 0, 117, 8, 67, 0, 239, 97, 67, 99, 109, 192, 157, 236, 67, 128, 65, 102, 67, 98, 253, 239, 242, 67, 188, 20, 102, 67, 18, 197, 254, 67, 238, 164,
			134, 67, 224, 241, 1, 68, 192, 212, 156, 67, 98, 156, 150, 4, 68, 22, 187, 179, 67, 207, 167, 2, 68, 224, 181, 196, 67, 192, 42, 255, 67, 0, 33, 198, 67, 98, 227, 5, 249, 67, 133, 140, 199, 67, 57, 22, 240, 67, 135, 14, 182, 67, 192, 204, 234, 67, 0, 40, 159, 67, 98, 71, 131, 229, 67, 88, 65, 136, 67, 163, 224, 229, 67, 191,
			59, 105, 67, 128, 5, 236, 67, 128, 101, 102, 67, 108, 192, 5, 236, 67, 128, 101, 102, 67, 98, 233, 54, 236, 67, 199, 78, 102, 67, 140, 105, 236, 67, 242, 66, 102, 67, 192, 157, 236, 67, 128, 65, 102, 67, 99, 109, 192, 109, 151, 67, 0, 140, 213, 67, 98, 208, 229, 169, 67, 0, 140, 213, 67, 184, 205, 178, 67, 154, 98, 214,
			67, 192, 89, 190, 67, 64, 198, 219, 67, 98, 255, 190, 197, 67, 230, 57, 223, 67, 235, 60, 207, 67, 255, 22, 227, 67, 192, 37, 212, 67, 128, 68, 233, 67, 98, 51, 113, 214, 67, 179, 39, 236, 67, 0, 67, 215, 67, 254, 195, 240, 67, 0, 67, 215, 67, 64, 220, 243, 67, 98, 0, 67, 215, 67, 254, 75, 251, 67, 62, 217, 214, 67, 35, 190,
			5, 68, 0, 255, 207, 67, 0, 159, 8, 68, 98, 92, 94, 196, 67, 58, 129, 13, 68, 48, 96, 171, 67, 96, 139, 13, 68, 128, 213, 148, 67, 96, 139, 13, 68, 98, 77, 130, 128, 67, 96, 139, 13, 68, 240, 35, 86, 67, 56, 231, 12, 68, 0, 204, 63, 67, 160, 60, 9, 68, 108, 128, 203, 63, 67, 128, 60, 9, 68, 98, 99, 193, 46, 67, 169, 112, 6, 68,
			0, 246, 40, 67, 95, 137, 252, 67, 0, 246, 40, 67, 64, 220, 243, 67, 98, 0, 246, 40, 67, 80, 252, 240, 67, 225, 89, 38, 67, 183, 169, 237, 67, 0, 246, 40, 67, 0, 88, 235, 67, 98, 197, 230, 47, 67, 31, 45, 229, 67, 129, 109, 71, 67, 19, 116, 223, 67, 0, 200, 90, 67, 64, 198, 219, 67, 98, 143, 234, 114, 67, 211, 47, 215, 67, 110,
			101, 134, 67, 0, 140, 213, 67, 192, 109, 151, 67, 0, 140, 213, 67, 99, 109, 128, 255, 123, 67, 128, 227, 222, 67, 98, 122, 30, 117, 67, 128, 227, 222, 67, 128, 138, 111, 67, 245, 91, 226, 67, 128, 138, 111, 67, 192, 165, 243, 67, 98, 128, 138, 111, 67, 189, 119, 2, 68, 122, 30, 117, 67, 0, 52, 4, 68, 128, 255, 123, 67,
			0, 52, 4, 68, 98, 67, 112, 129, 67, 0, 52, 4, 68, 0, 58, 132, 67, 197, 119, 2, 68, 0, 58, 132, 67, 192, 165, 243, 67, 98, 0, 58, 132, 67, 6, 92, 226, 67, 67, 112, 129, 67, 128, 227, 222, 67, 128, 255, 123, 67, 128, 227, 222, 67, 99, 109, 128, 209, 175, 67, 128, 227, 222, 67, 98, 253, 96, 172, 67, 128, 227, 222, 67, 64, 151,
			169, 67, 245, 91, 226, 67, 64, 151, 169, 67, 192, 165, 243, 67, 98, 64, 151, 169, 67, 189, 119, 2, 68, 253, 96, 172, 67, 0, 52, 4, 68, 128, 209, 175, 67, 0, 52, 4, 68, 98, 3, 66, 179, 67, 0, 52, 4, 68, 192, 11, 182, 67, 197, 119, 2, 68, 192, 11, 182, 67, 192, 165, 243, 67, 98, 192, 11, 182, 67, 6, 92, 226, 67, 3, 66, 179, 67,
			128, 227, 222, 67, 128, 209, 175, 67, 128, 227, 222, 67, 99, 101, 0, 0 };

		path.loadPathFromData(pathData, sizeof(pathData));
		break;

	}

	case SampleMapEditor::PopOutMap:
	{
		path.loadPathFromData(HiBinaryData::ProcessorEditorHeaderIcons::popupShape, sizeof(HiBinaryData::ProcessorEditorHeaderIcons::popupShape));
		break;
	}

	case SampleMapEditor::AutomapVelocity:
		{
			static const unsigned char pathData[] = { 110,109,224,10,200,193,134,11,168,193,108,192,21,44,193,134,11,168,193,98,40,167,39,193,134,11,168,193,192,21,36,193,210,66,166,193,192,21,36,193,134,11,164,193,108,192,21,36,193,134,11,140,193,98,192,21,36,193,58,212,137,193,40,167,39,193,134,11,136,
			193,192,21,44,193,134,11,136,193,108,224,10,200,193,134,11,136,193,98,44,66,202,193,134,11,136,193,224,10,204,193,58,212,137,193,224,10,204,193,134,11,140,193,108,224,10,204,193,134,11,164,193,98,224,10,204,193,210,66,166,193,44,66,202,193,134,11,168,
			193,224,10,200,193,134,11,168,193,99,109,224,10,200,193,134,11,128,193,108,192,21,44,193,134,11,128,193,98,40,167,39,193,134,11,128,193,192,21,36,193,164,133,124,193,192,21,36,193,12,23,120,193,108,192,21,36,193,12,23,88,193,98,192,21,36,193,116,168,
			83,193,40,167,39,193,12,23,80,193,192,21,44,193,12,23,80,193,108,224,10,200,193,12,23,80,193,98,44,66,202,193,12,23,80,193,224,10,204,193,116,168,83,193,224,10,204,193,12,23,88,193,108,224,10,204,193,12,23,120,193,98,224,10,204,193,164,133,124,193,44,
			66,202,193,134,11,128,193,224,10,200,193,134,11,128,193,99,109,224,10,200,193,13,23,64,193,108,192,21,44,193,13,23,64,193,98,40,167,39,193,13,23,64,193,192,21,36,193,165,133,60,193,192,21,36,193,13,23,56,193,108,192,21,36,193,13,23,40,193,98,192,21,36,
			193,117,168,35,193,40,167,39,193,13,23,32,193,192,21,44,193,13,23,32,193,108,224,10,200,193,13,23,32,193,98,44,66,202,193,13,23,32,193,224,10,204,193,117,168,35,193,224,10,204,193,13,23,40,193,108,224,10,204,193,13,23,56,193,98,224,10,204,193,165,133,
			60,193,44,66,202,193,13,23,64,193,224,10,200,193,13,23,64,193,99,109,224,10,200,193,12,23,16,193,108,192,21,44,193,12,23,16,193,98,40,167,39,193,12,23,16,193,192,21,36,193,164,133,12,193,192,21,36,193,12,23,8,193,98,192,21,36,193,116,168,3,193,40,167,
			39,193,12,23,0,193,192,21,44,193,12,23,0,193,108,224,10,200,193,12,23,0,193,98,44,66,202,193,12,23,0,193,224,10,204,193,116,168,3,193,224,10,204,193,12,23,8,193,98,224,10,204,193,163,133,12,193,44,66,202,193,12,23,16,193,224,10,200,193,12,23,16,193,99,
			101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));
			break;
		}
	case SampleMapEditor::RefreshVelocityXFade:
		{
			static const unsigned char pathData[] = { 110, 109, 0, 0, 220, 66, 64, 174, 223, 67, 108, 0, 0, 47, 67, 32, 151, 2, 68, 108, 0, 0, 47, 67, 64, 174, 223, 67, 108, 0, 0, 220, 66, 64, 174, 223, 67, 99, 109, 0, 0, 220, 66, 64, 174, 228, 67, 108, 0, 0, 220, 66, 32, 23, 5, 68, 108, 0, 0, 47, 67, 32, 23, 5, 68, 108, 0, 0, 220, 66, 64, 174, 228, 67, 99, 101, 0, 0 };

			path.loadPathFromData(pathData, sizeof(pathData));

		}
	}
	
	DrawablePath *p = new DrawablePath();

	p->setFill(FillType(Colours::white.withAlpha(0.8f)));
	p->setPath(path);

	return std::unique_ptr<DrawablePath>(p);
};





SampleEditorToolbarFactory::SampleEditorToolbarFactory(SampleEditor *editor_):
		editor(editor_),
		sampler(editor_->sampler)
	{};

ToolbarItemComponent * SampleEditorToolbarFactory::createItem(int itemId)
{
	ApplicationCommandManager *a = editor->samplerEditorCommandManager;

	ToolbarButton *tb = new ToolbarButton(itemId, "", ToolbarPaths::createPath(itemId, false),
													  ToolbarPaths::createPath(itemId, true));
	tb->setCommandToTrigger(a, itemId, true);
	
	return tb;
}

void SampleEditorToolbarFactory::getAllToolbarItemIds(Array<int> &ids)
{
	ids.clear();
	
	ids.add(SampleEditor::ZoomIn);
	ids.add(SampleEditor::ZoomOut);

	ids.add(spacerId);
		
	ids.add(SampleEditor::SelectWithMidi);

	ids.add(spacerId);

	ids.add(SampleEditor::EnableSampleStartArea);
	ids.add(SampleEditor::EnableLoopArea);
	ids.add(SampleEditor::EnablePlayArea);

	ids.add(spacerId);

	ids.add(SampleEditor::NormalizeVolume);
	ids.add(SampleEditor::LoopEnabled);
		
};

std::unique_ptr<Drawable> SampleEditorToolbarFactory::ToolbarPaths::createPath(int id, bool isOn)
{
	Path path;

	DrawablePath *p = new DrawablePath();
	p->setFill(FillType(Colours::white.withAlpha(isOn ? 1.0f : 0.8f)));

	switch(id)
	{
	default:
	case SampleEditor::ZoomIn:
		{
			static const unsigned char pathData[] = { 110,109,0,0,0,65,0,0,128,64,108,0,0,192,64,0,0,128,64,108,0,0,192,64,0,0,192,64,108,0,0,128,64,0,0,192,64,108,0,0,128,64,0,0,0,65,108,0,0,192,64,0,0,0,65,108,0,0,192,64,0,0,32,65,108,0,0,0,65,0,0,32,65,108,0,0,0,65,0,0,0,65,108,0,0,32,65,0,0,0,65,108,
			0,0,32,65,0,0,192,64,108,0,0,0,65,0,0,192,64,108,0,0,0,65,0,0,128,64,99,109,98,16,122,65,63,53,94,65,108,10,215,75,65,0,0,48,65,98,18,131,88,65,10,215,29,65,0,0,96,65,217,206,7,65,0,0,96,65,0,0,224,64,98,0,0,96,65,117,147,72,64,35,219,45,65,0,0,0,0,0,
			0,224,64,0,0,0,0,98,117,147,72,64,0,0,0,0,0,0,0,0,117,147,72,64,0,0,0,0,0,0,224,64,98,0,0,0,0,35,219,45,65,117,147,72,64,0,0,96,65,0,0,224,64,0,0,96,65,98,217,206,7,65,0,0,96,65,10,215,29,65,18,131,88,65,0,0,48,65,10,215,75,65,108,64,53,94,65,74,12,122,
			65,98,109,231,101,65,60,223,128,65,54,94,114,65,60,223,128,65,99,16,122,65,74,12,122,65,98,72,225,128,65,29,90,114,65,60,223,128,65,109,231,101,65,99,16,122,65,64,53,94,65,99,109,0,0,224,64,0,0,64,65,98,227,165,135,64,0,0,64,65,0,0,0,64,14,45,28,65,0,
			0,0,64,0,0,224,64,98,0,0,0,64,227,165,135,64,227,165,135,64,0,0,0,64,0,0,224,64,0,0,0,64,98,14,45,28,65,0,0,0,64,0,0,64,65,228,165,135,64,0,0,64,65,0,0,224,64,98,0,0,64,65,14,45,28,65,14,45,28,65,0,0,64,65,0,0,224,64,0,0,64,65,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));
			break;

		}
	case SampleEditor::ZoomOut:
		{
			static const unsigned char pathData[] = { 110,109,0,169,123,64,230,209,197,64,108,64,234,30,65,230,209,197,64,108,64,234,30,65,230,209,255,64,108,0,169,123,64,230,209,255,64,99,109,98,16,122,65,63,53,94,65,108,10,215,75,65,0,0,48,65,98,18,131,88,65,10,215,29,65,0,0,96,65,217,206,7,65,0,0,96,
			65,0,0,224,64,98,0,0,96,65,117,147,72,64,35,219,45,65,0,0,0,0,0,0,224,64,0,0,0,0,98,117,147,72,64,0,0,0,0,0,0,0,0,117,147,72,64,0,0,0,0,0,0,224,64,98,0,0,0,0,35,219,45,65,117,147,72,64,0,0,96,65,0,0,224,64,0,0,96,65,98,217,206,7,65,0,0,96,65,10,215,29,
			65,18,131,88,65,0,0,48,65,10,215,75,65,108,64,53,94,65,74,12,122,65,98,109,231,101,65,60,223,128,65,54,94,114,65,60,223,128,65,99,16,122,65,74,12,122,65,98,72,225,128,65,29,90,114,65,60,223,128,65,109,231,101,65,99,16,122,65,64,53,94,65,99,109,0,0,224,
			64,0,0,64,65,98,227,165,135,64,0,0,64,65,0,0,0,64,14,45,28,65,0,0,0,64,0,0,224,64,98,0,0,0,64,227,165,135,64,227,165,135,64,0,0,0,64,0,0,224,64,0,0,0,64,98,14,45,28,65,0,0,0,64,0,0,64,65,228,165,135,64,0,0,64,65,0,0,224,64,98,0,0,64,65,14,45,28,65,14,
			45,28,65,0,0,64,65,0,0,224,64,0,0,64,65,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));
			break;

		}
	case SampleEditor::NormalizeVolume:
		{
			if(isOn)
			{

				static const unsigned char pathData[] = { 110,109,0,0,219,67,0,88,15,68,98,213,103,218,67,0,88,15,68,216,223,217,67,7,96,15,68,0,80,217,67,0,120,15,68,98,20,8,217,67,253,131,15,68,202,186,216,67,27,146,15,68,0,96,216,67,0,182,15,68,98,54,5,216,67,229,217,15,68,0,128,215,67,23,40,16,68,0,128,
				215,67,0,152,16,68,108,0,128,215,67,0,216,39,68,98,0,128,215,67,233,71,40,68,54,5,216,67,27,148,40,68,0,96,216,67,0,184,40,68,98,202,186,216,67,229,219,40,68,20,8,217,67,3,236,40,68,0,80,217,67,0,248,40,68,98,216,223,217,67,249,15,41,68,213,103,218,67,
				0,24,41,68,0,0,219,67,0,24,41,68,108,0,192,3,68,0,24,41,68,98,21,12,4,68,0,24,41,68,20,80,4,68,249,15,41,68,0,152,4,68,0,248,40,68,98,246,187,4,68,3,236,40,68,155,226,4,68,229,219,40,68,0,16,5,68,0,184,40,68,98,101,61,5,68,27,148,40,68,0,128,5,68,233,
				71,40,68,0,128,5,68,0,216,39,68,108,0,128,5,68,0,152,16,68,98,0,128,5,68,23,40,16,68,101,61,5,68,229,217,15,68,0,16,5,68,0,182,15,68,98,155,226,4,68,27,146,15,68,246,187,4,68,253,131,15,68,0,152,4,68,0,120,15,68,98,20,80,4,68,7,96,15,68,21,12,4,68,0,
				88,15,68,0,192,3,68,0,88,15,68,108,0,0,219,67,0,88,15,68,99,109,0,128,219,67,0,88,17,68,108,0,128,3,68,0,88,17,68,108,0,128,3,68,0,24,39,68,108,0,128,219,67,0,24,39,68,108,0,128,219,67,0,88,17,68,99,109,5,149,224,67,131,132,16,68,108,5,149,224,67,37,
				79,27,68,108,5,149,224,67,158,85,28,68,108,238,135,224,67,45,43,40,68,98,161,193,226,67,33,155,36,68,61,146,225,67,84,35,33,68,229,245,232,67,101,247,31,68,98,248,182,234,67,52,173,31,68,115,198,234,67,12,119,31,68,40,66,237,67,200,209,30,68,108,201,
				153,244,67,23,92,29,68,108,35,237,0,68,18,90,28,68,108,188,166,0,68,159,85,28,68,108,176,243,0,68,159,85,28,68,108,41,170,244,67,153,83,27,68,108,138,82,237,67,232,221,25,68,98,210,214,234,67,164,56,25,68,88,199,234,67,125,2,25,68,70,6,233,67,75,184,
				24,68,98,157,162,225,67,93,140,23,68,187,206,226,67,142,20,20,68,8,149,224,67,131,132,16,68,99,101,0,0 };

				path.loadPathFromData (pathData, sizeof (pathData));

			}
			else
			{
				static const unsigned char pathData[] = { 110,109,0,0,219,67,0,88,15,68,98,213,103,218,67,0,88,15,68,216,223,217,67,7,96,15,68,0,80,217,67,0,120,15,68,98,20,8,217,67,253,131,15,68,202,186,216,67,27,146,15,68,0,96,216,67,0,182,15,68,98,54,5,216,67,229,217,15,68,0,128,215,67,23,40,16,68,0,128,
				215,67,0,152,16,68,108,0,128,215,67,0,216,39,68,98,0,128,215,67,233,71,40,68,54,5,216,67,27,148,40,68,0,96,216,67,0,184,40,68,98,202,186,216,67,229,219,40,68,20,8,217,67,3,236,40,68,0,80,217,67,0,248,40,68,98,216,223,217,67,249,15,41,68,213,103,218,67,
				0,24,41,68,0,0,219,67,0,24,41,68,108,0,192,3,68,0,24,41,68,98,21,12,4,68,0,24,41,68,20,80,4,68,249,15,41,68,0,152,4,68,0,248,40,68,98,246,187,4,68,3,236,40,68,155,226,4,68,229,219,40,68,0,16,5,68,0,184,40,68,98,101,61,5,68,27,148,40,68,0,128,5,68,233,
				71,40,68,0,128,5,68,0,216,39,68,108,0,128,5,68,0,152,16,68,98,0,128,5,68,23,40,16,68,101,61,5,68,229,217,15,68,0,16,5,68,0,182,15,68,98,155,226,4,68,27,146,15,68,246,187,4,68,253,131,15,68,0,152,4,68,0,120,15,68,98,20,80,4,68,7,96,15,68,21,12,4,68,0,
				88,15,68,0,192,3,68,0,88,15,68,108,0,0,219,67,0,88,15,68,99,109,0,128,219,67,0,88,17,68,108,0,128,3,68,0,88,17,68,108,0,128,3,68,0,24,39,68,108,0,128,219,67,0,24,39,68,108,0,128,219,67,0,88,17,68,99,109,5,149,224,67,245,67,24,68,108,5,149,224,67,96,113,
				28,68,108,5,149,224,67,250,214,28,68,108,238,135,224,67,185,107,33,68,98,161,193,226,67,171,10,32,68,61,146,225,67,0,179,30,68,229,245,232,67,229,62,30,68,98,248,182,234,67,45,34,30,68,115,198,234,67,54,13,30,68,40,66,237,67,61,205,29,68,108,201,153,
				244,67,149,60,29,68,108,35,237,0,68,180,216,28,68,108,188,166,0,68,251,214,28,68,108,176,243,0,68,251,214,28,68,108,41,170,244,67,25,115,28,68,108,138,82,237,67,113,226,27,68,98,210,214,234,67,120,162,27,68,88,199,234,67,129,141,27,68,70,6,233,67,201,
				112,27,68,98,157,162,225,67,174,252,26,68,187,206,226,67,3,165,25,68,8,149,224,67,245,67,24,68,99,101,0,0 };

				path.loadPathFromData (pathData, sizeof (pathData));
			}
			break;
		}
	case SampleEditor::LoopEnabled:
		{
			if(!isOn)
			{
				static const unsigned char pathData[] = { 110,109,0,128,4,68,46,23,60,68,108,0,128,24,68,46,23,60,68,108,0,128,24,68,46,151,52,68,108,0,192,40,68,46,87,66,68,108,0,128,4,68,46,87,66,68,99,101,0,0 };

				path.loadPathFromData (pathData, sizeof (pathData));
			}
			else
			{
				static const unsigned char pathData[] = { 110,109,0,0,128,64,0,0,32,65,98,0,0,128,64,236,81,14,65,106,188,156,64,0,0,0,65,0,0,192,64,0,0,0,65,108,0,0,160,65,0,0,0,65,108,0,0,160,65,0,0,64,65,108,158,239,223,65,0,0,192,64,108,0,0,160,65,0,0,0,0,108,0,0,160,65,0,0,128,64,108,0,0,192,64,0,0,128,
				64,98,88,57,44,64,0,0,128,64,0,0,0,0,25,4,214,64,0,0,0,0,0,0,32,65,108,0,0,0,0,0,0,64,65,108,0,0,128,64,0,0,64,65,108,0,0,128,64,0,0,32,65,99,109,0,0,224,65,0,0,64,65,108,0,0,224,65,0,0,96,65,98,0,0,224,65,203,161,113,65,229,208,216,65,0,0,128,65,0,0,
				208,65,0,0,128,65,108,158,239,63,65,0,0,128,65,108,0,0,64,65,0,0,64,65,108,0,0,128,64,0,0,144,65,108,0,0,64,65,0,0,192,65,108,158,239,63,65,0,0,160,65,108,0,0,208,65,0,0,160,65,98,213,120,234,65,0,0,160,65,0,0,0,66,164,112,138,65,0,0,0,66,0,0,96,65,108,
				0,0,0,66,0,0,64,65,108,0,0,224,65,0,0,64,65,99,101,0,0 };

				path.loadPathFromData (pathData, sizeof (pathData));
			}

			break;
		}
	case SampleEditor::SelectWithMidi:
		{
			if(isOn)
			{
				static const unsigned char pathData[] = { 110,109,38,63,187,67,7,187,112,68,108,38,63,187,67,7,123,113,68,108,38,63,187,67,132,242,128,68,108,38,63,187,67,132,82,129,68,108,38,191,188,67,132,82,129,68,108,38,23,199,67,132,82,129,68,108,38,83,209,67,132,82,129,68,108,38,211,210,67,132,82,129,
				68,108,38,175,219,67,132,82,129,68,108,38,47,221,67,132,82,129,68,108,38,7,230,67,132,82,129,68,108,38,135,231,67,132,82,129,68,108,38,135,231,67,132,242,128,68,108,38,135,231,67,7,123,113,68,108,38,135,231,67,7,187,112,68,108,38,7,230,67,7,187,112,68,
				108,38,47,221,67,7,187,112,68,108,38,175,219,67,7,187,112,68,108,38,83,209,67,7,187,112,68,108,38,23,199,67,7,187,112,68,108,38,191,188,67,7,187,112,68,108,38,63,187,67,7,187,112,68,99,109,38,63,190,67,7,59,114,68,108,38,139,194,67,7,59,114,68,108,38,
				139,194,67,7,119,124,68,108,38,119,197,67,7,119,124,68,108,38,119,197,67,132,146,128,68,108,38,63,190,67,132,146,128,68,108,38,63,190,67,7,59,114,68,99,109,38,163,202,67,7,59,114,68,108,38,103,205,67,7,59,114,68,108,38,103,205,67,7,151,124,68,108,38,
				211,207,67,7,151,124,68,108,38,211,207,67,132,146,128,68,108,38,151,200,67,132,146,128,68,108,38,151,200,67,7,119,124,68,108,38,163,202,67,7,119,124,68,108,38,163,202,67,7,59,114,68,99,109,38,127,213,67,7,59,114,68,108,38,3,216,67,7,59,114,68,108,38,
				3,216,67,7,151,124,68,108,38,47,218,67,7,151,124,68,108,38,47,218,67,132,146,128,68,108,38,211,210,67,132,146,128,68,108,38,211,210,67,7,151,124,68,108,38,127,213,67,7,151,124,68,108,38,127,213,67,7,59,114,68,99,109,38,23,224,67,7,59,114,68,108,38,135,
				228,67,7,59,114,68,108,38,135,228,67,132,146,128,68,108,38,47,221,67,132,146,128,68,108,38,47,221,67,7,151,124,68,108,38,23,224,67,7,151,124,68,108,38,23,224,67,7,59,114,68,99,101,0,0 };

				path.loadPathFromData (pathData, sizeof (pathData));

			}
			else
			{
				static const unsigned char pathData[] = { 110,109,0,160,47,68,46,23,126,68,108,0,160,47,68,151,139,128,68,108,168,134,48,68,75,88,128,68,108,0,32,49,68,151,11,129,68,108,0,160,49,68,151,235,128,68,108,246,8,49,68,94,59,128,68,108,0,224,49,68,151,11,128,68,99,101,0,0 };
				path.loadPathFromData (pathData, sizeof (pathData));

			}

			break;
		}
	case SampleEditor::EnableSampleStartArea:
		{
			static const unsigned char pathData[] = { 110,109,151,43,172,67,83,50,116,68,108,5,17,149,67,83,50,116,68,108,5,17,149,67,50,10,114,68,98,2,17,149,67,139,8,113,68,96,197,148,67,112,100,112,68,30,46,148,67,226,29,112,68,98,215,150,147,67,87,215,111,68,186,154,146,67,17,180,111,68,199,57,145,67,
			15,180,111,68,98,143,186,143,67,17,180,111,68,161,152,142,67,156,227,111,68,253,211,141,67,177,66,112,68,98,85,15,141,67,201,161,112,68,2,173,140,67,244,49,113,68,4,173,140,67,49,243,113,68,98,2,173,140,67,167,235,114,68,240,27,141,67,196,166,115,68,
			206,249,141,67,133,36,116,68,98,146,205,142,67,74,162,116,68,154,37,145,67,31,58,117,68,228,1,149,67,6,236,117,68,98,161,19,160,67,71,236,119,68,151,12,167,67,130,144,121,68,198,236,169,67,183,216,122,68,98,238,204,172,67,237,32,124,68,3,61,174,67,12,
			50,126,68,7,61,174,67,10,134,128,68,98,3,61,174,67,94,143,129,68,205,112,173,67,234,82,130,68,100,216,171,67,172,208,130,68,98,244,63,170,67,111,78,131,68,216,42,167,67,225,183,131,68,13,153,162,67,255,12,132,68,98,60,7,158,67,30,98,132,68,212,181,152,
			67,173,140,132,68,210,164,146,67,173,140,132,68,98,136,252,139,67,173,140,132,68,215,77,134,67,153,91,132,68,191,152,129,67,114,249,131,68,98,73,199,121,67,74,151,131,68,15,157,115,67,75,26,131,68,208,178,112,67,117,130,130,68,98,143,200,109,67,160,234,
			129,68,109,83,108,67,36,19,129,68,111,83,108,67,5,248,127,68,108,111,83,108,67,79,16,126,68,108,74,68,141,67,79,16,126,68,108,74,68,141,67,92,205,128,68,98,72,68,141,67,237,88,129,68,123,151,141,67,165,178,129,68,225,61,142,67,133,218,129,68,98,68,228,
			142,67,102,2,130,68,61,11,144,67,85,22,130,68,204,178,145,67,85,22,130,68,98,86,90,147,67,85,22,130,68,122,149,148,67,7,253,129,68,56,100,149,67,106,202,129,68,98,241,50,150,67,206,151,129,68,79,154,150,67,167,76,129,68,81,154,150,67,246,232,128,68,98,
			78,154,150,67,165,13,128,68,169,213,149,67,127,252,126,68,95,76,148,67,134,117,126,68,98,251,184,146,67,143,238,125,68,168,215,142,67,28,13,125,68,101,168,136,67,42,209,123,68,98,31,121,130,67,42,146,122,68,170,192,124,67,148,170,121,68,12,188,120,67,
			104,26,121,68,98,108,183,116,67,62,138,120,68,73,99,113,67,221,194,119,68,160,191,110,67,69,196,118,68,98,245,27,108,67,175,197,117,68,32,202,106,67,138,128,116,68,34,202,106,67,216,244,114,68,98,33,202,106,67,81,186,112,68,37,169,108,67,40,25,111,68,
			45,103,112,67,91,17,110,68,98,52,37,116,67,145,9,109,68,44,49,122,67,74,59,108,68,140,69,129,67,131,166,107,68,98,128,114,133,67,192,17,107,68,81,125,138,67,94,199,106,68,0,102,144,67,92,199,106,68,98,218,219,150,67,94,199,106,68,42,93,156,67,167,24,
			107,68,239,233,160,67,55,187,107,68,98,175,118,165,67,203,93,108,68,38,122,168,67,138,42,109,68,84,244,169,67,117,33,110,68,98,124,110,171,67,99,24,111,68,146,43,172,67,218,187,112,68,149,43,172,67,217,11,115,68,99,109,56,229,98,67,22,189,99,68,98,127,
			117,81,67,22,189,99,68,57,23,67,67,217,25,103,68,57,23,67,67,106,46,107,68,108,57,23,67,67,65,201,132,68,98,57,23,67,67,137,211,134,68,127,117,81,67,235,129,136,68,56,229,98,67,235,129,136,68,108,218,97,178,67,235,129,136,68,98,182,25,187,67,235,129,
			136,68,217,72,194,67,137,211,134,68,217,72,194,67,65,201,132,68,108,217,72,194,67,106,46,107,68,98,217,72,194,67,217,25,103,68,181,25,187,67,22,189,99,68,218,97,178,67,22,189,99,68,108,57,229,98,67,22,189,99,68,99,109,56,229,98,67,78,179,104,68,108,218,
			97,178,67,78,179,104,68,98,26,105,181,67,78,179,104,68,218,174,183,67,148,195,105,68,218,174,183,67,106,46,107,68,108,218,174,183,67,65,201,132,68,98,218,174,183,67,172,126,133,68,26,105,181,67,207,6,134,68,218,97,178,67,207,6,134,68,108,57,229,98,67,
			207,6,134,68,98,184,214,92,67,207,6,134,68,57,75,88,67,172,126,133,68,57,75,88,67,65,201,132,68,108,57,75,88,67,106,46,107,68,98,57,75,88,67,148,195,105,68,184,214,92,67,78,179,104,68,57,229,98,67,78,179,104,68,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));

			break;
		}
	case SampleEditor::EnablePlayArea:
		{
			static const unsigned char pathData[] = { 110,109,175,7,110,67,206,99,107,68,108,135,142,143,67,206,99,107,68,98,156,49,150,67,208,99,107,68,8,76,155,67,57,141,107,68,204,221,158,67,8,224,107,68,98,138,111,162,67,220,50,108,68,23,30,165,67,124,170,108,68,115,233,166,67,234,70,109,68,98,200,180,
			168,67,91,227,109,68,244,235,169,67,196,160,110,68,246,142,170,67,37,127,111,68,98,241,49,171,67,137,93,112,68,112,131,171,67,217,181,113,68,116,131,171,67,21,136,115,68,108,116,131,171,67,213,16,118,68,98,112,131,171,67,71,236,119,68,98,229,170,67,228,
			70,121,68,74,169,169,67,172,32,122,68,98,42,109,168,67,119,250,122,68,206,40,166,67,162,161,123,68,55,220,162,67,48,22,124,68,98,153,143,159,67,192,138,124,68,174,63,155,67,7,197,124,68,120,236,149,67,7,197,124,68,108,19,98,143,67,7,197,124,68,108,19,
			98,143,67,118,62,132,68,108,175,7,110,67,118,62,132,68,99,109,19,98,143,67,76,94,112,68,108,19,98,143,67,239,197,119,68,98,225,19,144,67,1,201,119,68,254,172,144,67,139,202,119,68,108,45,145,67,137,202,119,68,98,93,106,147,67,138,202,119,68,248,247,148,
			67,212,158,119,68,62,214,149,67,104,71,119,68,98,127,180,150,67,254,239,118,68,162,35,151,67,64,58,118,68,164,35,151,67,46,38,117,68,108,164,35,151,67,61,194,114,68,98,162,35,151,67,167,195,113,68,55,163,150,67,4,30,113,68,98,162,149,67,83,209,112,68,
			98,137,161,148,67,165,132,112,68,25,140,146,67,78,94,112,68,20,98,143,67,76,94,112,68,99,109,213,62,98,67,22,189,99,68,98,84,42,81,67,22,189,99,68,57,23,67,67,217,25,103,68,57,23,67,67,106,46,107,68,108,57,23,67,67,65,201,132,68,98,57,23,67,67,137,211,
			134,68,84,42,81,67,235,129,136,68,213,62,98,67,235,129,136,68,108,243,186,176,67,235,129,136,68,98,51,69,185,67,235,129,136,68,193,78,192,67,137,211,134,68,193,78,192,67,65,201,132,68,108,193,78,192,67,106,46,107,68,98,193,78,192,67,217,25,103,68,51,
			69,185,67,22,189,99,68,243,186,176,67,22,189,99,68,108,212,62,98,67,22,189,99,68,99,109,213,62,98,67,78,179,104,68,108,243,186,176,67,78,179,104,68,98,91,178,179,67,78,179,104,68,55,236,181,67,148,195,105,68,55,236,181,67,106,46,107,68,108,55,236,181,
			67,65,201,132,68,98,55,236,181,67,172,126,133,68,91,178,179,67,207,6,134,68,243,186,176,67,207,6,134,68,108,212,62,98,67,207,6,134,68,98,3,80,92,67,207,6,134,68,75,220,87,67,172,126,133,68,75,220,87,67,65,201,132,68,108,75,220,87,67,106,46,107,68,98,
			75,220,87,67,148,195,105,68,4,80,92,67,78,179,104,68,212,62,98,67,78,179,104,68,99,101,0,0 };



			path.loadPathFromData (pathData, sizeof (pathData));
			break;
		}
	case SampleEditor::EnableLoopArea:
		{
			static const unsigned char pathData[] = { 110,109,27,122,132,67,103,154,132,68,108,27,122,132,67,246,182,145,68,108,183,9,153,67,246,182,145,68,108,183,9,153,67,191,254,148,68,108,222,83,69,67,191,254,148,68,108,222,83,69,67,103,154,132,68,99,109,12,114,56,67,253,74,128,68,98,85,198,37,67,253,
			74,128,68,170,99,22,67,226,47,130,68,170,99,22,67,83,124,132,68,108,170,99,22,67,29,155,149,68,98,170,99,22,67,142,231,151,68,86,198,37,67,115,204,153,68,12,114,56,67,115,204,153,68,108,16,193,161,67,115,204,153,68,98,236,22,171,67,115,204,153,68,66,
			200,178,67,142,231,151,68,66,200,178,67,29,155,149,68,108,66,200,178,67,83,124,132,68,98,66,200,178,67,226,47,130,68,236,22,171,67,253,74,128,68,16,193,161,67,253,74,128,68,108,12,114,56,67,253,74,128,68,99,109,12,114,56,67,140,22,131,68,108,16,193,161,
			67,140,22,131,68,98,50,255,164,67,140,22,131,68,33,110,167,67,237,175,131,68,33,110,167,67,83,124,132,68,108,33,110,167,67,29,155,149,68,98,33,110,167,67,131,103,150,68,50,255,164,67,228,0,151,68,16,193,161,67,228,0,151,68,108,12,114,56,67,228,0,151,
			68,98,201,245,49,67,228,0,151,68,235,23,45,67,131,103,150,68,235,23,45,67,29,155,149,68,108,235,23,45,67,83,124,132,68,98,235,23,45,67,237,175,131,68,201,245,49,67,140,22,131,68,12,114,56,67,140,22,131,68,99,101,0,0 };

			path.loadPathFromData (pathData, sizeof (pathData));

			break;
		}
	}
	
	p->setPath(path);

	return std::unique_ptr<Drawable>(p);
};


} // namespace hise
